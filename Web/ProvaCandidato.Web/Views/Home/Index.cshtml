@{ ViewBag.Title = "Instruções"; }

<div class="container">
    <div class="row mb-3">
        <div class="col-12">
            <h2>Olá candidato(a)!</h2>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <h3>Aqui está a sua prova de ASP.NET MVC utilizando linguagem C#</h3>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <h4>Instruções Gerais</h4>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <ul class="list-group">
                <li class="list-group-item">
                    O projeto utiliza Razor e o EntityFramework para acesso ao SQL Server. Para acessar o banco de dados você deverá rodar uma instância do
                    SQL Server Express em sua máquina. Poderá utilizar a seguinte ConnectionString: <strong>Server=localhost\SQLEXPRESS01;Database=master;Trusted_Connection=True;</strong>
                </li>
                <li class="list-group-item">
                    Não é necessário que você se preocupe com a formatação e com o CSS. Isso não será avaliado.
                </li>
                <li class="list-group-item">
                    Caso você não se sinta confortável, poderá implementar outra forma de acesso à dados desde que, no final, a aplicação persista os dados no banco de dados designado.
                </li>
                <li class="list-group-item">
                    Se você sentir dificuldade em algum item ou em parte de um item, pule para o próximo. Os itens são avaliados separadamente e serão considerados desenvolvimentos parciais.
                </li>
                <li class="list-group-item">
                    Você pode demonstrar seus conhecimentos utilizando Herança, Javascript, WebAPI ou qualquer outro recurso que julgar interessante. Nesse caso, comente o código com suas intenções. Isso ajudará no momento da avaliação.
                </li>
                <li class="list-group-item">
                    Se quiser, sugira novas formas de implementação e comente sobre o benefício que poderá ser alcançado.
                </li>
            </ul>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <h4>Durante o teste, você deverá:</h4>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <p>
                Considerando o DER (Diagrama de Entidade e Relacionamento) abaixo para resolver os exercícios:
            </p>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <figure class="figure">
                <img src="~/Assets/Images/ModeloDados.png" class="figure-img img-fluid rounded" alt="Diagrama de Entidade e Relacionamento">
            </figure>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 position-relative">
            <div class="accordion" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            01. Configuração das Referências do Projeto
                        </button>
                    </h2>

                    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Para concluir este item, você deve referenciar o projeto ProvaCandidato.Data no projeto ProvaCandidato.Web para que possa utilizar o modelo de dados criado previamente.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading02">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse02" aria-expanded="false" aria-controls="collapse02">
                            02. Parametrizar o Sistema Utilizando o Web.config
                        </button>
                    </h2>

                    <div id="collapse02" class="accordion-collapse collapse" aria-labelledby="heading02" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            No leiaute, tornar o texto "Parametrize o Nome da Empresa Aqui" parametrizável, sendo que seu conteúdo deverá ser obtido a partir do Web.Config através da chave NomeEmpresa do AppSettings. A classe <code>ConfigurationManager</code> do namespace <code>System.Configuration</code> pode lhe ajudar.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading03">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse03" aria-expanded="false" aria-controls="collapse03">
                            03. Criar as Funcionalidades para Listagem, Inclusão, Edição, Exclusão e Visualização de Dados
                        </button>
                    </h2>

                    <div id="collapse03" class="accordion-collapse collapse" aria-labelledby="heading03" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <ul>
                                <li>Criar o controller Cidade e implementar funcionalidades para listar, criar, editar, excluir e visualizar Cidades.</li>
                                <li>Criar o controller Cliente e implementar funcionalidades para listar, criar, editar, excluir e visualizar Clientes.</li>
                            </ul>

                            Você poderá utilizar o scaffolder do EntityFramework para lhe auxiliar no processo.<br />
                            A Lista de Cliente deverá retornar apenas os clientes ativos.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading04">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse04" aria-expanded="false" aria-controls="collapse04">
                            04. Validar Campos
                        </button>
                    </h2>

                    <div id="collapse04" class="accordion-collapse collapse" aria-labelledby="heading04" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <ul>
                                <li>Incluir uma validação obrigando que o tamanho no Nome da Cidade tenha no mínimo 3 caracteres e no máximo 50 caracteres.</li>
                                <li>Incluir uma validação obrigando que o tamanho no Nome do Cliente tenha no mínimo 3 caracteres e no máximo 50 ca racteres.</li>
                                <li>Incluir uma validação obrigando que a data de nascimento não possa ser maior do que a data atual. Você poderá criar uma validação customizada ou validar manualmente no controller.</li>
                            </ul>

                            Os atributos <code>MinLength</code>, <code>MaxLength</code> e <code>StringLength</code> podem ajudar a validar o tamanho e a validação da data poderá ser realizada diretamente no controller através do <code>ModelState</code>.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading05">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse05" aria-expanded="false" aria-controls="collapse05">
                            05. Herança
                        </button>
                    </h2>

                    <div id="collapse05" class="accordion-collapse collapse" aria-labelledby="heading05" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Crie uma classe genérica herdando de Controller e modifique a herança dos controllers de Cliente e Cidade para que passem a usar essa nova classe. As classes de Cliente e Cidade deverão ser passadas como argumento para a classe genérica.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading06">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse06" aria-expanded="false" aria-controls="collapse06">
                            06. Formatar Dados
                        </button>
                    </h2>

                    <div id="collapse06" class="accordion-collapse collapse" aria-labelledby="heading06" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Corrigir a formatação da Data de Nascimento do Cliente para o formato dia, mês e ano.<br />
                            Talvez você precise utilizar os atributos <code>DataType(DataType.Date)</code> e <code>DisplayFormat</code> para concluir esta atividade.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading07">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse07" aria-expanded="false" aria-controls="collapse07">
                            07. Utilizar Componente DropDown
                        </button>
                    </h2>

                    <div id="collapse07" class="accordion-collapse collapse" aria-labelledby="heading07" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            A seleção da Cidade no CRUD de Cliente deve ocorrer através de uma lista de seleção (DropDown ou Combo).
                            <strong>Será considerado um bônus</strong> se você utilizar WebAPI e popular a combo via AJAX. Não se lembra qual é a sintaxe para retornar os dados via AJAX?
                            <br />
                            <br />
                            <code>
                                $.get("ajax/test.html", function(data) {<br />
                                &nbsp;&nbsp;$(".result").html(data);<br />
                                &nbsp;&nbsp;alert("Load was performed.");<br />
                                });
                            </code>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading08">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse08" aria-expanded="false" aria-controls="collapse08">
                            08. Implementar Pesquisa de Dados
                        </button>
                    </h2>

                    <div id="collapse08" class="accordion-collapse collapse" aria-labelledby="heading08" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Implementar na Lista de Clientes uma funcionalidade que permita pesquisar (filtrar) os Clientes por qualquer parte do Nome.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading09">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse09" aria-expanded="false" aria-controls="collapse09">
                            09. Utilizar o Helper para Exibição de Mensagem
                        </button>
                    </h2>

                    <div id="collapse09" class="accordion-collapse collapse" aria-labelledby="heading09" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Após a inclusão, alteração e exclusão de um Cliente ou Cidade, exibir uma mensagem de sucesso usando a classe <code>MessageHelper</code>.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading10">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse10" aria-expanded="false" aria-controls="collapse10">
                            10. Padronizar Lista de Cliente
                        </button>
                    </h2>

                    <div id="collapse10" class="accordion-collapse collapse" aria-labelledby="heading10" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Modificar a Lista de Clientes para que exiba o Nome da Cidade do Cliente. Será necessário fazer o <code>Include</code> da propriedade Cidade ao montar a query no <code>DBSet</code> do Cliente.
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading11">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse11" aria-expanded="false" aria-controls="collapse11">
                            11. Implementar uma Lista de Observações do Cliente
                        </button>
                    </h2>

                    <div id="collapse11" class="accordion-collapse collapse" aria-labelledby="heading11" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            Este item é opcional e você poderá utilizá-lo para demonstrar seu conhecimento com o EntityFramework, Migrations e Javascript.<br />

                            <ul>
                                <li>Você deverá criar uma classe chamada ClienteObservacao cujo conteúdo será apenas uma propriedade para armazenar a observação e uma referência para o Cliente.</li>
                                <li>Você deverá alterar a classe Cliente para que esta contenha uma lista de observações do cliente. Não se esqueça do atributo <code>InverseProperty</code> e que a propriedade deve ser do tipo <code>ICollection<></code>.</li>
                                <li>Você deverá alterar a visualização de detalhe do cliente para que seja possível adicionar as observações.</li>
                                <li>A inclusão de uma nova observação deverá ocorrer através de um popup que exibirá uma Partial View.</>
                            </ul>

                            Lembre-se que o projeto de dados é o ProvaCandidato.Data e o Migrations não está habilitado. Os comandos <code>help Enable-Migrations</code>, <code>help Add-Migration</code> e <code>help Update-Database</code> poderão ser muito úteis para habilitar o Migrations e atualizar o banco de dados.<br />
                            <br />

                            Abaixo, um exemplo para implementar a partial view...<br />

                            <img src="~/Assets/Images/ExemploPartialView.jpg" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
